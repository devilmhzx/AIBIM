<?xml version="1.0" encoding="UTF-8"?>
<DEFECTS>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\ai_dev\develop_bim\aidesign\log</FILEPATH>
      <FILENAME>easylogging++.h</FILENAME>
      <LINE>896</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'el::base::SubsecondPrecision::m_offset' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>el::base::SubsecondPrecision::{ctor}</FUNCTION>
    <DECORATED>??0SubsecondPrecision@base@el@@QEAA@XZ</DECORATED>
    <FUNCLINE>896</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\ai_dev\develop_bim\aidesign\log</FILEPATH>
      <FILENAME>easylogging++.h</FILENAME>
      <LINE>896</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'el::base::SubsecondPrecision::m_width' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>el::base::SubsecondPrecision::{ctor}</FUNCTION>
    <DECORATED>??0SubsecondPrecision@base@el@@QEAA@XZ</DECORATED>
    <FUNCLINE>896</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\ai_dev\develop_bim\aidesign\log</FILEPATH>
      <FILENAME>easylogging++.h</FILENAME>
      <LINE>899</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'el::base::SubsecondPrecision::m_offset' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>el::base::SubsecondPrecision::{ctor}</FUNCTION>
    <DECORATED>??0SubsecondPrecision@base@el@@QEAA@H@Z</DECORATED>
    <FUNCLINE>899</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\ai_dev\develop_bim\aidesign\log</FILEPATH>
      <FILENAME>easylogging++.h</FILENAME>
      <LINE>899</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'el::base::SubsecondPrecision::m_width' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>el::base::SubsecondPrecision::{ctor}</FUNCTION>
    <DECORATED>??0SubsecondPrecision@base@el@@QEAA@H@Z</DECORATED>
    <FUNCLINE>899</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\ai_dev\develop_bim\aidesign\log</FILEPATH>
      <FILENAME>easylogging++.h</FILENAME>
      <LINE>1273</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'el::base::utils::CommandLineArgs::m_argv' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>el::base::utils::CommandLineArgs::{ctor}</FUNCTION>
    <DECORATED>??0CommandLineArgs@utils@base@el@@QEAA@XZ</DECORATED>
    <FUNCLINE>1273</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\ai_dev\develop_bim\aidesign\log</FILEPATH>
      <FILENAME>easylogging++.h</FILENAME>
      <LINE>1273</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'el::base::utils::CommandLineArgs::m_argc' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>el::base::utils::CommandLineArgs::{ctor}</FUNCTION>
    <DECORATED>??0CommandLineArgs@utils@base@el@@QEAA@XZ</DECORATED>
    <FUNCLINE>1273</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\ai_dev\develop_bim\aidesign\log</FILEPATH>
      <FILENAME>easylogging++.h</FILENAME>
      <LINE>1276</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'el::base::utils::CommandLineArgs::m_argv' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>el::base::utils::CommandLineArgs::{ctor}</FUNCTION>
    <DECORATED>??0CommandLineArgs@utils@base@el@@QEAA@HPEAPEBD@Z</DECORATED>
    <FUNCLINE>1276</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\ai_dev\develop_bim\aidesign\log</FILEPATH>
      <FILENAME>easylogging++.h</FILENAME>
      <LINE>1276</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'el::base::utils::CommandLineArgs::m_argc' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>el::base::utils::CommandLineArgs::{ctor}</FUNCTION>
    <DECORATED>??0CommandLineArgs@utils@base@el@@QEAA@HPEAPEBD@Z</DECORATED>
    <FUNCLINE>1276</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\ai_dev\develop_bim\aidesign\log</FILEPATH>
      <FILENAME>easylogging++.h</FILENAME>
      <LINE>1279</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'el::base::utils::CommandLineArgs::m_argv' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>el::base::utils::CommandLineArgs::{ctor}</FUNCTION>
    <DECORATED>??0CommandLineArgs@utils@base@el@@QEAA@HPEAPEAD@Z</DECORATED>
    <FUNCLINE>1279</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\ai_dev\develop_bim\aidesign\log</FILEPATH>
      <FILENAME>easylogging++.h</FILENAME>
      <LINE>1279</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'el::base::utils::CommandLineArgs::m_argc' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>el::base::utils::CommandLineArgs::{ctor}</FUNCTION>
    <DECORATED>??0CommandLineArgs@utils@base@el@@QEAA@HPEAPEAD@Z</DECORATED>
    <FUNCLINE>1279</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\ai_dev\develop_bim\aidesign\log</FILEPATH>
      <FILENAME>easylogging++.cpp</FILENAME>
      <LINE>1143</LINE>
      <COLUMN>63</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>el::base::utils::DateTime::getTimeDifference::&lt;lambda_950ad44827613395827be2ea9937dd07&gt;::()</FUNCTION>
    <DECORATED>??R&lt;lambda_950ad44827613395827be2ea9937dd07&gt;@@QEBA_KAEBUtimeval@@@Z</DECORATED>
    <FUNCLINE>1144</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\ai_dev\develop_bim\aidesign\log</FILEPATH>
      <FILENAME>easylogging++.cpp</FILENAME>
      <LINE>1143</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>el::base::utils::DateTime::getTimeDifference::&lt;lambda_950ad44827613395827be2ea9937dd07&gt;::()</FUNCTION>
    <DECORATED>??R&lt;lambda_950ad44827613395827be2ea9937dd07&gt;@@QEBA_KAEBUtimeval@@@Z</DECORATED>
    <FUNCLINE>1144</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\ai_dev\develop_bim\aidesign\log</FILEPATH>
      <FILENAME>easylogging++.cpp</FILENAME>
      <LINE>1138</LINE>
      <COLUMN>100</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>el::base::utils::DateTime::getTimeDifference</FUNCTION>
    <DECORATED>?getTimeDifference@DateTime@utils@base@el@@SA_KAEBUtimeval@@0W4TimestampUnit@34@@Z</DECORATED>
    <FUNCLINE>1135</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\ai_dev\develop_bim\aidesign\log</FILEPATH>
      <FILENAME>easylogging++.cpp</FILENAME>
      <LINE>1138</LINE>
      <COLUMN>83</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>el::base::utils::DateTime::getTimeDifference</FUNCTION>
    <DECORATED>?getTimeDifference@DateTime@utils@base@el@@SA_KAEBUtimeval@@0W4TimestampUnit@34@@Z</DECORATED>
    <FUNCLINE>1135</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\ai_dev\develop_bim\aidesign\log</FILEPATH>
      <FILENAME>easylogging++.cpp</FILENAME>
      <LINE>1139</LINE>
      <COLUMN>102</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>el::base::utils::DateTime::getTimeDifference</FUNCTION>
    <DECORATED>?getTimeDifference@DateTime@utils@base@el@@SA_KAEBUtimeval@@0W4TimestampUnit@34@@Z</DECORATED>
    <FUNCLINE>1135</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\ai_dev\develop_bim\aidesign\log</FILEPATH>
      <FILENAME>easylogging++.cpp</FILENAME>
      <LINE>1139</LINE>
      <COLUMN>83</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>el::base::utils::DateTime::getTimeDifference</FUNCTION>
    <DECORATED>?getTimeDifference@DateTime@utils@base@el@@SA_KAEBUtimeval@@0W4TimestampUnit@34@@Z</DECORATED>
    <FUNCLINE>1135</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\ai_dev\develop_bim\aidesign\log</FILEPATH>
      <FILENAME>easylogging++.cpp</FILENAME>
      <LINE>1207</LINE>
      <COLUMN>67</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>el::base::utils::DateTime::parseFormat</FUNCTION>
    <DECORATED>?parseFormat@DateTime@utils@base@el@@CAPEADPEAD_KPEBDPEBUtm@@1PEBVSubsecondPrecision@34@@Z</DECORATED>
    <FUNCLINE>1174</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\ai_dev\develop_bim\aidesign\log</FILEPATH>
      <FILENAME>easylogging++.cpp</FILENAME>
      <LINE>1204</LINE>
      <COLUMN>67</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>el::base::utils::DateTime::parseFormat</FUNCTION>
    <DECORATED>?parseFormat@DateTime@utils@base@el@@CAPEADPEAD_KPEBDPEBUtm@@1PEBVSubsecondPrecision@34@@Z</DECORATED>
    <FUNCLINE>1174</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\ai_dev\develop_bim\aidesign\log</FILEPATH>
      <FILENAME>easylogging++.cpp</FILENAME>
      <LINE>1195</LINE>
      <COLUMN>66</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>el::base::utils::DateTime::parseFormat</FUNCTION>
    <DECORATED>?parseFormat@DateTime@utils@base@el@@CAPEADPEAD_KPEBDPEBUtm@@1PEBVSubsecondPrecision@34@@Z</DECORATED>
    <FUNCLINE>1174</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\ai_dev\develop_bim\aidesign\log</FILEPATH>
      <FILENAME>easylogging++.cpp</FILENAME>
      <LINE>1363</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'el::base::LogFormat::m_flags' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>el::base::LogFormat::{ctor}</FUNCTION>
    <DECORATED>??0LogFormat@base@el@@QEAA@W4Level@2@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z</DECORATED>
    <FUNCLINE>1363</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\ai_dev\develop_bim\aidesign\log</FILEPATH>
      <FILENAME>easylogging++.cpp</FILENAME>
      <LINE>1379</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26439</DEFECTCODE>
    <DESCRIPTION>This kind of function may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>el::base::LogFormat::{ctor}</FUNCTION>
    <DECORATED>??0LogFormat@base@el@@QEAA@$$QEAV012@@Z</DECORATED>
    <FUNCLINE>1379</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\ai_dev\develop_bim\aidesign\log</FILEPATH>
      <FILENAME>easylogging++.cpp</FILENAME>
      <LINE>1986</LINE>
      <COLUMN>9</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'el::base::Storage::m_loggingLevel' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>el::base::Storage::{ctor}</FUNCTION>
    <DECORATED>??0Storage@base@el@@QEAA@AEBV?$shared_ptr@VLogBuilder@el@@@std@@@Z</DECORATED>
    <FUNCLINE>1986</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\ai_dev\develop_bim\aidesign\log</FILEPATH>
      <FILENAME>easylogging++.h</FILENAME>
      <LINE>2778</LINE>
      <COLUMN>0</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'el::base::DefaultLogDispatchCallback::m_data' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>el::base::DefaultLogDispatchCallback::{ctor}</FUNCTION>
    <DECORATED>??0DefaultLogDispatchCallback@base@el@@QEAA@XZ</DECORATED>
    <FUNCLINE>2778</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
</DEFECTS>